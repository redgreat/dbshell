# author: wangcw
# This configration file opts for MySQL 8.0.30.
# assume: 1 CPU core / 2G Memory / HDD storage with ... 
# 全部参数详见，此处仅列举常用重要需要调整的和阿里RDS开放了的参数 https://dev.mysql.com/doc/refman/8.0/en/server-option-variable-reference.html

############核心参数
#innodb_buffer_pool 
# 注：缓冲池位于主内存中，InnoDB用它来缓存被访问过的表和索引文件，使常用数据可以直接在内存中被处理，从而提升处理速度；
#innodb_buffer_pool_instance
# 注：MySQL5.6.6之后可以调整为多个。表示InnoDB缓冲区可以被划分为多个区域，也可以理解为把innodb_buffer_pool划分为多个实例，可以提高并发性，避免在高并发环境下，出现内存的争用问题；
#innodb_data_file_path
# 注：该参数可以指定系统表空间文件的路径和ibdata1文件的大小。默认大小是10MB，这里建议调整为1GB
#transaction_isolation
# 注：MySQL数据库的事务隔离级别有四种，分别为READ-UNCOMMITTED、READ-COMMITTED、REPEATABLE-READ和SERIALIZABLE。默认采用REPEATABLE-READ（可重复读）
#innodb_log_buffer_size
# 注：是日志缓冲的大小，InnoDB改变数据的时候，它会把这次改动的记录先写到日志缓冲中
#innodb_log_file_size
# 注：是指Redo log日志的大小，该值设置不宜过大也不宜过小，如果设置太大，实例恢复的时候需要较长时间，如果设置太小，会造成redo log 切换频繁，产生无用的I/O消耗，影响数据库性能
#innodb_log_files_in_group
# 注：redo log文件组中日志文件的数量，默认情况下至少有2个
#max_connections
# 该参数代表MySQL数据库的最大连接数，如果在访问数据库时经常出现"Too Many Connections"的错误提 示，则需要增大该参数值。
#expire_logs_days
# 注：该参数代表binlog的过期时间，单位是天
#slow_query_log
# 注：慢查询日志的开关，该参数等于1代表开启慢查询
#long_query_time
# 注：慢查询的时间，某条SQL语句超过该参数设置的时间，就会记录到慢查询日志中。单位是秒
#binlog_format
# 注：该参数代表二进制日志的格式。binlog格式有三种statement、row和mixed。生产环境中使用row这种格式更安全，不会出现跨库复制丢数据的情况
#lower_case_table_names
# 注：表名是否区分大小的参数。默认是值为0。0代表区分大小写，1代表不区分大小写，以小写存储
#interactive_timeout
# 注：是服务器关闭交互式连接前等待活动的时间,默认是28800s（8小时）
#wait_timeout
# 注：是服务器关闭非交互式连接之前等待活动的时间，默认是28800s（8小时）
#innodb_flush_method
# 注：这个参数影响InnoDB数据文件，redo log文件的打开刷写模式
#log_queries_not_using_indexes = ON
# 控制未使用索引的查询是否写入慢日志。
# 如果在启用慢速查询日志的情况下启用此变量，则会记录预期检索所有行的查询
# 此选项不一定意味着不使用索引。例如，使用完整索引扫描的查询使用索引，但会被记录，因为索引不会限制行数

[mysqld]
#prompt = "\\u@\\h:\\d>"

# base settings #
user = mysql
#basedir = /opt/mysql
datadir = /opt/mysql/data
tmpdir = /home/mysql/temp
# bind_address = 192.168.200.231
port = 3306
socket=/var/lib/mysql/mysql.sock
pid-file=/var/run/mysqld/mysqld.pid
server_id = 1 #表示是本机的序号为1,一般来讲就是master的意思
autocommit = 1
character_set_server = utf8mb4
# server 级别字符集，服务器安装时指定的默认编码格式，这个变量建议由系统自己管理，不要人为定义。 
character-set-client-handshake=FALSE
character_set_filesystem = binary
collation-server = utf8mb4_general_ci
# 字段排序规则
lower_case_table_names = 1
# 库名表名不区分大小写，0表名存储为给定的大小和比较是区分大小写的，1表名存储在磁盘是小写的，但是比较的时候是不区分大小写，2表名存储为给定的大小写但是比较的时候是小写的
# unix,linux下lower_case_table_names默认值为 0 .Windows下默认值是 1 .Mac OS X下默认值是 2，初始化后不能修改此配置值，必须初始化时带着此参数
transaction_isolation = READ-COMMITTED
# MySQL支持4种事务隔离级别，他们分别是：
# READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE.
# 如没有指定，MySQL默认采用的是REPEATABLE-READ，ORACLE默认的是READ-COMMITTED
explicit_defaults_for_timestamp = OFF
event_scheduler = ON
sql_mode = STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
# skip-networking
lc_time_names = en_US
default-time_zone = '+8:00'
# 这个参数设置默认的服务器时区。 该参数用于设置全局 time_zone 系统变量。如果未给出该选项，默认时区 为格林威治时间。 通常该参数的值，要求与操作系统的时区设置值一致。
# 错误的时区设置可 能导致数据库的时间函数返回结果不正常。 对于中国地区的客户，通常使用北京时间，因此该参数值设置为’+8:00’。
default_week_format = 0
# The default week format used by WEEK() functions
init_connect='SET NAMES utf8mb4'
# 表示初始化连接都设置为utf8mb4字符集
delayed_insert_limit = 100
delayed_insert_timeout = 300
delayed_queue_size = 1000
delay_key_write = ON
# Type of DELAY_KEY_WRITE
low_priority_updates = 0
# INSERT/DELETE/UPDATE has lower priority than selects
updatable_views_with_limit = YES
skip_symbolic_links = YES
# 禁用数据库外链，有需要时可以打开
local_infile = 1   
# 禁用客户端的load data local infile命令    默认0开启
# 此开关默认为NULL，即不允许导入导出
secure_file_priv = /home/mysql/temp

performance_schema = 0
optimizer_prune_level = 1
optimizer_search_depth = 62
optimizer_trace_limit = 1
# The maximum number of optimizer traces to display.
optimizer_trace_max_mem_size = 16384
# The maximum cumulative size of stored optimizer traces.
optimizer_trace_offset = -1
# The offset of optimizer traces to display.
loose_performance_schema_events_stages_history_long_size = 0
loose_performance_schema_events_stages_history_size = 0
loose_performance_schema_events_statements_history_long_size = 0
loose_performance_schema_events_statements_history_size = 0
loose_performance_schema_events_transactions_history_long_size = 0
loose_performance_schema_events_transactions_history_size = 0
loose_performance_schema_events_waits_history_long_size = 0
loose_performance_schema_events_waits_history_size = 0
loose_performance_schema_max_cond_classes = 0
loose_performance_schema_max_digest_length = 0
loose_performance_schema_max_digest_sample_age = 0
loose_performance_schema_max_file_classes = 0
loose_performance_schema_max_file_handles = 0
loose_performance_schema_max_memory_classes = 0
loose_performance_schema_max_mutex_classes = 0
loose_performance_schema_max_rwlock_classes = 0
loose_performance_schema_max_socket_classes = 0
loose_performance_schema_max_sql_text_length = 0
loose_performance_schema_max_stage_classes = 0
loose_performance_schema_max_statement_classes = 0
loose_performance_schema_max_statement_stack = 1
loose_performance_schema_max_thread_classes = 0
loose_performance_schema_session_connect_attrs_size = 0

# connection #
skip_ssl
interactive_timeout = 1800
# 服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。默认值：28800秒（8小时） 
wait_timeout = 1800
# 服务器关闭非交互连接之前等待活动的秒数。在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，
# 取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。参数默认值：28800秒（8小时）
# MySQL服务器所支持的最大连接数是有上限的，因为每个连接的建立都会消耗内存，因此我们希望客户端在连接到MySQL Server处理完相应的操作后，
# 应该断开连接并释放占用的内存。如果你的MySQL Server有大量的闲置连接，他们不仅会白白消耗内存，而且如果连接一直在累加而不断开，
# 最终肯定会达到MySQL Server的连接上限数，这会报'too many connections'的错误。对于wait_timeout的值设定，应该根据系统的运行情况来判断。
# 在系统运行一段时间后，可以通过show processlist命令查看当前系统的连接状态，如果发现有大量的sleep状态的连接进程，则说明该参数设置的过大，
# 可以进行适当的调整小些。要同时设置interactive_timeout和wait_timeout才会生效。 
lock_wait_timeout = 1800
skip_name_resolve = 1
# 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，
# 则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求
max_connections = 512
# MySQL的最大连接数，如果服务器的并发连接请求量比较大，建议调高此值，以增加并行连接数量，当然这建立在机器能支撑的情况下，因为如果连接数越多，
# 介于MySQL会为每个连接提供连接缓冲区，就会开销越多的内存，所以要适当调整该值，不能盲目提高设值。可以过'conn%'通配符查看当前状态的连接数量，以定夺该值的大小。
max_connect_errors = 1000000
# 对于同一主机，如果有超出该参数值个数的中断错误连接，则该主机将被禁止连接。如需对该主机进行解禁，执行：FLUSH HOST。
open_files_limit = 65535
# MySQL打开的文件描述符限制，默认最小1024;当open_files_limit没有被配置的时候，比较max_connections*5和ulimit -n的值，哪个大用哪个，
# 当open_file_limit被配置的时候，比较open_files_limit和max_connections*5的值，哪个大用哪个。
table_open_cache = 2048
# MySQL每打开一个表，都会读入一些数据到table_open_cache缓存中，当MySQL在这个缓存中找不到相应信息时，才会去磁盘上读取。默认值64
# 假定系统有200个并发连接，则需将此参数设置为200*N(N为每个连接所需的文件描述符数目)；
# 当把table_open_cache设置为很大时，如果系统处理不了那么多文件描述符，那么就会出现客户端失效，连接不上
max_allowed_packet = 128m
# 接受的数据包大小；增加该变量的值十分安全，这是因为仅当需要时才会分配额外内存。例如，仅当你发出长查询或MySQLd必须返回大的结果行时MySQLd才会分配更多内存。
# 该变量之所以取较小默认值是一种预防措施，以捕获客户端和服务器之间的错误信息包，并确保不会因偶然使用大的信息包而导致内存溢出。
max_heap_table_size = 8M
# 定义了用户可以创建的内存表(memory table)的大小。这个值用来计算内存表的最大行数值。这个变量支持动态改变
# 规定了内部内存临时表的最大值，每个线程都要分配。(实际起限制作用的是tmp_table_size和max_heap_table_size的最小值。)
# 如果内存临时表超出了限制，MySQL就会自动地把它转化为基于磁盘的MyISAM表，存储在指定的tmpdir目录下
# 如果需要的话并且你有很多group by语句，并且你有很多内存，增大tmp_table_size(和max_heap_table_size)的值。这个变量不适用与用户创建的内存表(memory table).
disconnect_on_expired_password = ON
# This variable controls how the server handles clients with expired passwords
div_precision_increment = 4
# Precision of the result of '/' operator will be increased on that value
end_markers_in_json = OFF
# Whether optimizer JSON output should add end markers.
eq_range_index_dive_limit = 10
flush_time = 0
group_concat_max_len = 1024000
# The maximum length of the result of function  GROUP_CONCAT()
host_cache_size = 644
max_binlog_cache_size = 18446744073709547520
max_binlog_stmt_cache_size = 18446744073709547520
max_error_count = 64
max_execution_time = 0
# statement be interrupted if the executing time exceeds this value
max_join_size = 18446744073709551615
max_length_for_sort_data = 1024
# Max number of bytes in sorted records
max_points_in_geometry = 65536
# The maximum value of the points_per_circle argument to the ST_Buffer_Strategy() function.
max_prepared_stmt_count = 16382
# Maximum number of prepared statements in the server
max_seeks_for_key = 18446744073709500000
max_sort_length = 1024
max_sp_recursion_depth = 0
max_write_lock_count = 102400
# After this many write locks, allow some read locks to run in between
min_examined_row_limit = 0
# Queries that examine fewer than this number of rows are not logged to the slow query log.
net_buffer_length = 16384
net_read_timeout = 30
# Number of seconds to wait for more data from a connection before aborting the read
net_retry_count = 10
# If a read on a communication port is interrupted, retry this many times before giving up
net_write_timeout = 60
# Number of seconds to wait for a block to be written to a connection before aborting the write
ngram_token_size = 2
session_track_gtids = OFF

# session memory setting #
read_buffer_size = 16m
# MySQL读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。
# 如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能 
read_rnd_buffer_size = 8m
# MySQL的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，
# MySQL会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySQL会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大 
sort_buffer_size = 8m
# MySQL执行排序使用的缓冲大小。如果想要增加ORDER BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。
# 如果不能，可以尝试增加sort_buffer_size变量的大小 
tmp_table_size = 128m
# MySQL的heap（堆积）表缓冲大小。所有联合在一个DML指令内完成，并且大多数联合甚至可以不用临时表即可以完成。
# 大多数临时表是基于内存的(HEAP)表。具有大的记录长度的临时表 (所有列的长度的和)或包含BLOB列的表存储在硬盘上。
# 如果某个内部heap（堆积）表大小超过tmp_table_size，MySQL可以根据需要自动将内存中的heap表改为基于硬盘的MyISAM表。
# 还可以通过设置tmp_table_size选项来增加临时表的大小。也就是说，如果调高该值，MySQL同时将增加heap表的大小，可达到提高联接查询速度的效果
join_buffer_size = 128m
# 联合查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每连接独享
thread_cache_size = 64
# 这个值（默认8）表示可以重新利用保存在缓存中线程的数量，当断开连接时如果缓存中还有空间，那么客户端的线程将被放到缓存中，
# 如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，
# 增加这个值可以改善系统性能.通过比较Connections和Threads_created状态的变量，可以看到这个变量的作用。(–>表示要调整的值)
# 根据物理内存设置规则如下：
# 1G  —> 8
# 2G  —> 16
# 3G  —> 32
# 大于3G  —> 64
#query_cache_size = 8M
# MySQL的查询缓冲大小（从4.0.1开始，MySQL提供了查询缓冲机制）使用查询缓冲，MySQL将SELECT语句和查询结果存放在缓冲区中，
# 今后对于同样的SELECT语句（区分大小写），将直接从缓冲区中读取结果。根据MySQL用户手册，使用查询缓冲最多可以达到238%的效率。
# 通过检查状态值'Qcache_%'，可以知道query_cache_size设置是否合理：如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况，
# 如果Qcache_hits的值也非常大，则表明查询缓冲使用非常频繁，此时需要增加缓冲大小；如果Qcache_hits的值不大，则表明你的查询重复率很低，
# 这种情况下使用查询缓冲反而会影响效率，那么可以考虑不用查询缓冲。此外，在SELECT语句中加入SQL_NO_CACHE可以明确表示不使用查询缓冲
# 8.0这个参数废除了！！！
# query_cache_limit = 2M
#指定单个查询能够使用的缓冲区大小，默认1M 8.0这个参数废除了！！！
key_cache_age_threshold = 300
key_cache_block_size = 1024
# The default size of key cache blocks
key_cache_division_limit = 100
# The minimum percentage of warm blocks in key cache
stored_program_cache = 256
# table_definition_cache = {LEAST(DBInstanceClassMemory/1073741824*512, 2048)}
# The number of cached table definitions
# table_open_cache = {LEAST(DBInstanceClassMemory/1073741824*512, 2048)}
# table_open_cache_instances = {LEAST(DBInstanceClassMemory/1073741824*4, 16)}
# The number of open tables cache instances.
preload_buffer_size = 32768
# The size of the buffer that is allocated when preloading indexes.
query_alloc_block_size = 8192
# Allocation block size for query parsing and execution
query_prealloc_size = 8192
# Persistent buffer for query parsing and execution
range_alloc_block_size = 4096
# The size of blocks that are allocated when doing range optimization.
range_optimizer_max_mem_size = 8388608
thread_stack = 262144
# tls_version = TLSv1,TLSv1.1,TLSv1.2
temptable_max_ram = 1073741824
transaction_alloc_block_size = 8192
transaction_prealloc_size = 4096

# log settings #
#lc-messages-dir = /opt/mysql/logs/
log_error = /opt/mysql/logs/error.log
# 错误日志路径
slow_query_log = 1
# 慢日志记录是否开启 
slow_query_log_file = /opt/mysql/logs/slow.log
# 慢日志路径 
log_output = FILE
log_queries_not_using_indexes = OFF
# 控制未使用索引的查询是否写入慢日志。
# 如果在启用慢速查询日志的情况下启用此变量，则会记录预期检索所有行的查询
# 此选项不一定意味着不使用索引。例如，使用完整索引扫描的查询使用索引，但会被记录，因为索引不会限制行数
#general_log = 1
#一般查询存储路径
#general_log_file = /var/mysql/logs/generalsql.log
# log_slow_slave_statements = 1
long_query_time = 2
# 慢查询时间 超过1秒则为慢查询
slow_launch_time = 2
# expire_logs_days = 7 #这个配置参数在8.0里被废除了
binlog_expire_logs_seconds = 604800
# 超过7天的binlog删除
# log-slave-updates = 1
# binlog-rows-query-log-events = 1
# log-bin-trust-function-creators = 1
log-bin = on
log-bin = /opt/mysql/logs/mysql-bin
log-bin-index = /opt/mysql/logs/mysql-bin.index
relay-log = /opt/mysql/logs/relay-log
relay-log_index = /opt/mysql/logs/relay-log.index
binlog_cache_size = 2M
# 一个事务，在没有提交的时候，产生的日志，记录到Cache中；等到事务提交需要提交的时候，则把日志持久化到磁盘。默认binlog_cache_size大小32K
log_bin_trust_function_creators=1 
# 当二进制日志启用后，这个变量就会启用。它控制是否可以信任存储函数创建者，不会创建写入二进制日志引起不安全事件的存储函数。
# 如果设置为0（默认值），用户不得创建或修改存储函数，除非它们具有除CREATE ROUTINE或ALTER ROUTINE特权之外的SUPER权限。 
# 设置为0还强制使用DETERMINISTIC特性或READS SQL DATA或NO SQL特性声明函数的限制。 如果变量设置为1，MySQL不会对创建存储函数实施这些限制。 此变量也适用于触发器的创建。
max_binlog_size = 1G
# 最大binlog
max_relay_log_size = 1G
# 最大relaylog
binlog_cache_size = 2048KB
# 事务缓存大小
# binlog_cahce_use      # 事务缓存使用次数
# binblog_cache_disk_use  # 事务缓存磁盘使用次数(内存缓存设置过小不够用时)
# binlog_stmt_cache_size=1048576 # 非事务语句缓存大小
# binlog_stmt_cache_use    # 非事务语句缓存使用次数
# binlog_stmt_cache_disk_use  # 非事务语句磁盘缓存使用次数
back_log = 600
# MySQL能有的连接数量。当主要MySQL线程在一个很短时间内得到非常多的连接请求，这就起作用，
# 然后主线程花些时间(尽管很短)检查连接并且启动一个新线程。back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。
# 如果期望在一个短时间内有很多连接，你需要增加它。也就是说，如果MySQL的连接数据达到max_connections时，新来的请求将会被存在堆栈中，
# 以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源。
# 另外，这值（back_log）限于您的操作系统对到来的TCP/IP连接的侦听队列的大小。
# 你的操作系统在这个队列大小上有它自己的限制（可以检查你的OS文档找出这个变量的最大值），试图设定back_log高于你的操作系统的限制将是无效的。
binlog_checksum = CRC32
binlog_order_commits = ON
binlog_rows_query_log_events = OFF
binlog_row_image = full
relay-log-purge = 1
# 当不用中继日志时，删除他们。这个操作有 SQL 线程完成
#log_bin_use_v1_row_events = 1
log_error_verbosity = 2
log_slow_admin_statements = OFF
# Include slow administrative statements in the statements written to the slow query log
log_throttle_queries_not_using_indexes = 0

# default_tmp_storage_engine = InnoDB
# 表示临时表的默认存储引擎
# default-storage-engine = InnoDB 
default_storage_engine = InnoDB 
# 默认存储引擎

# innodb settings #
##innodb引擎参数
innodb_file_per_table = true
# innodb_file_per_table = 1 
# InnoDB为独立表空间模式，每个数据库的每个表都会生成一个数据空间
# 独立表空间优点：
# 1．每个表都有自已独立的表空间。
# 2．每个表的数据和索引都会存在自已的表空间中。
# 3．可以实现单表在不同的数据库中移动。
# 4．空间可以回收（除drop table操作处，表空不能自已回收）
# 缺点：
# 单表增加过大，如超过100G
# 结论：
# 共享表空间在Insert操作上少有优势。其它都没独立表空间表现好。当启用独立表空间时，请合理调整：innodb_open_files
# Innodb存储引擎可将所有数据存放于ibdata*的共享表空间，也可将每张表存放于独立的.ibd文件的独立表空间.
# 共享表空间以及独立表空间都是针对数据的存储方式而言的。
# 共享表空间: 某一个数据库的所有的表数据，索引文件全部放在一个文件中，默认这个共享表空间的文件路径在data目录下。 默认的文件名为:ibdata1 初始化为10M。
# 独立表空间: 每一个表都将会生成以独立的文件方式来进行存储，每一个表都有一个.frm表描述文件，还有一个.ibd文件。 其中这个文件包括了单独一个表的数据内容以及索引内容，默认情况下它的存储位置也是在表的位置之中。
innodb_open_files = 500
# 限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。这个值默认是300
# innodb_data_file_path = ibdata1:100M:autoextend
##表空间、步进
# innodb_page_size = 16384
innodb_buffer_pool_size = 1G
# InnoDB使用一个缓冲池来保存索引和原始数据, 不像MyISAM.
# 这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少.
# 在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的80%
# 不要设置过大,否则,由于物理内存的竞争可能导致操作系统的换页颠簸.
# 注意在32位系统上你每个进程可能被限制在 2-3.5G 用户层面内存限制,所以不要设置的太高. 
# InnoDB缓存池缓存索引、行的数据、自适应哈希索引、插入缓存（Insert Buffer）、锁 还有其他的内部数据结构。（所以，如果数据库的数据量不大，并且没有快速增长，
# 就不必为缓存池分配过多的内存，当为缓存池配置的内存比需要缓存的表和索引大很多也没什么必要，会造成资源浪费。）
# a.很大的缓存池可能会有很多脏页，导致InnoDB在关闭的时候会消耗很长的时间，因为要把脏页写回到数据文件里
# b.一个大的缓存池重启服务器可能也要比较长的时间用来预热缓冲池，当然Percona的Server有快速预热的功能可以节省很多时间。
innodb_buffer_pool_instances = 2
# 内存缓冲池个数 {LEAST(DBInstanceClassMemory/1073741824, 8)} 按CPU个数和内存来计算
innodb_io_capacity = 10000
innodb_io_capacity_max = 20000
# 数据库落盘脏页个数 ,配置压力和磁盘的性能相关，如果过大，IO能力不足，则出现卡顿。
# innodb_io_capacity默认是200，单位是页，该参数的设置大小取决于硬盘的IOPS，即每秒的输入输出量(或读写次数)。
# 可以动态调整参数:set global innodb_io_capacity=2000;
# innodb_file_format = Barracuda
# innodb_file_format_max = Barracuda
#innodb_undo_tablespaces = 3 
innodb_redo_log_capacity = 1500M
# 此参数确定数据日志文件的大小，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间
# 事物日志大小.在日志组中每个日志文件的大小，你应该设置日志文件总合大小到你缓冲池大小的5%~100%，来避免在日志文件覆写上不必要的缓冲池刷新行为.不论如何, 
# 请注意一个大的日志文件大小会增加恢复进程所需要的时间.MySQL的InnoDB 存储引擎使用一个指定大小的Redo log空间（一个环形的数据结构），
# Redo log的空间通过innodb_log_file_size和innodb_log_files_in_group（默认为2）参数来调节。将这俩参数相乘即可得到总的可用Redo log 空间。
# 尽管技术上并不关心你是通过innodb_log_file_size还是innodb_log_files_in_group来调整Redo log空间，不过多数情况下还是通过innodb_log_file_size 来调节。
# 为InnoDB引擎设置合适的Redo log空间对于写敏感的工作负载来说是非常重要的，然而，这项工作是要做出权衡的。配置的Redo空间越大，InnoDB就能更好的优化写操作；
# 然而，增大Redo空间也意味着更长的恢复时间当出现崩溃或掉电等意外时。关于恢复时间，并不好预测对于一个指定的 innodb_log_file_size 值出现崩溃是需要多长的恢复时间
# 他取决于硬件能力、MySQL版本以及工作负载等因素。然而，一般情况下我们可以按照每1GB的Redo log的恢复时间大约在5分钟左右来估算。如果恢复时间对于你的使用环境来说很重要，
# 建议做一些模拟测试，在正常工作负载下（预热完毕后）模拟系统崩溃，来评估更准确的恢复时间。
#innodb_redo_log_capacity = 3
# 为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3 
innodb_log_buffer_size = 128m
# 此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间
innodb_log_checksums = ON
innodb_log_compressed_pages = OFF
innodb_flush_log_at_trx_commit = 1
# 0：如果innodb_flush_log_at_trx_commit的值为0,log buffer每秒就会被刷写日志文件到磁盘，提交事务的时候不做任何操作（执行是由mysql的master thread线程来执行的。
# 主线程中每秒会将重做日志缓冲写入磁盘的重做日志文件(REDO LOG)中。不论事务是否已经提交）默认的日志文件是ib_logfile0,ib_logfile1
# 1：当设为默认值1的时候，每次提交事务的时候，都会将log buffer刷写到日志。
# 2：如果设为2,每次提交事务都会写日志，但并不会执行刷的操作。每秒定时会刷到日志文件。要注意的是，并不能保证100%每秒一定都会刷到磁盘，这要取决于进程的调度。
# 每次事务提交的时候将数据写入事务日志，而这里的写入仅是调用了文件系统的写入操作，而文件系统是有 缓存的，所以这个写入并不能保证数据已经写入到物理磁盘
# 默认值1是为了保证完整的ACID。当然，你可以将这个配置项设为1以外的值来换取更高的性能，但是在系统崩溃的时候，你将会丢失1秒的数据。
# 设为0的话，mysqld进程崩溃的时候，就会丢失最后1秒的事务。设为2,只有在操作系统崩溃或者断电的时候才会丢失最后1秒的数据。InnoDB在做恢复的时候会忽略这个值。
# 总结
# 设为1当然是最安全的，但性能页是最差的（相对其他两个参数而言，但不是不能接受）。如果对数据一致性和完整性要求不高，完全可以设为2，如果只最求性能，例如高并发写的日志服务器，设为0来获得更高性能 
# innodb_large_prefix = 1
innodb_write_io_threads = 16
# Number of background write I/O threads in InnoDB.
innodb_read_io_threads = 16
# innodb使用后台线程处理数据页上的读写 I/O(输入输出)请求,根据你的 CPU 核数来更改,默认是4
# 注:这两个参数不支持动态改变,需要把该参数加入到my.cnf里，修改完后重启MySQL服务,允许值的范围从 1-64 
#innodb_autoinc_lock_mode = 2
#innodb_force_recovery= 1
# 导出表空间损坏的表
#innodb_fast_shutdown
# 加速innodb关闭
innodb_log_group_home_dir = /opt/mysql/innodbarchive
innodb_undo_directory = /opt/mysql/undologs
innodb_max_dirty_pages_pct = 90
# innodb主线程刷新缓存池中的数据，使脏数据比例小于90%
innodb_max_dirty_pages_pct_lwm = 0
innodb_max_purge_lag = 0
innodb_max_purge_lag_delay = 0
innodb_max_undo_log_size = 2G
# innodb_monitor_disable =
# innodb_monitor_enable = 
innodb_adaptive_flushing = ON
innodb_adaptive_flushing_lwm = 10
innodb_adaptive_hash_index = ON
innodb_adaptive_max_sleep_delay = 150000
innodb_autoextend_increment = 64
innodb_buffer_pool_dump_at_shutdown = ON
innodb_buffer_pool_dump_pct = 25
innodb_buffer_pool_load_at_startup = ON
innodb_change_buffering = all
innodb_change_buffer_max_size = 25
innodb_checksum_algorithm = crc32
# Specifies how to generate and verify the checksum stored in the disk blocks of InnoDB tablespaces.
innodb_cmp_per_index_enabled = OFF
innodb_commit_concurrency = 0
innodb_compression_failure_threshold_pct = 5
innodb_compression_level = 6
innodb_compression_pad_pct_max = 50
innodb_concurrency_tickets = 5000
innodb_deadlock_detect = ON
innodb_disable_sort_file_cache = ON
# if ON, disable page cache when innodb using sort file
innodb_flush_method = O_DIRECT
innodb_flush_neighbors = 1
innodb_flush_sync = ON
innodb_ft_cache_size = 8000000
innodb_ft_enable_diag_print = OFF
innodb_ft_enable_stopword = ON
innodb_ft_max_token_size = 84
# InnoDB Fulltext search maximum token size in characters
innodb_ft_min_token_size = 3
# InnoDB Fulltext search minimum token size in characters
innodb_ft_num_word_optimize = 2000
innodb_ft_result_cache_limit = 2000000000
innodb_ft_sort_pll_degree = 2
innodb_ft_total_cache_size = 640000000
innodb_io_capacity = 20000
innodb_io_capacity_max = 40000
innodb_lock_wait_timeout = 50
# InnoDB事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB在它自己的锁定表中自动检测事务死锁并且回滚事务。InnoDB用LOCK TABLES语句注意到锁定设置。默认值是50秒 
innodb_lru_scan_depth = 1024
innodb_old_blocks_pct = 37
# Percentage of the buffer pool to reserve for 'old' blocks.
innodb_old_blocks_time = 1000
innodb_online_alter_log_max_size = 134217728
# Maximum modification log file size for online index creation
innodb_optimize_fulltext_only = OFF
innodb_page_cleaners = 1
innodb_print_all_deadlocks = OFF
# Print all deadlocks to MySQL error log (off by default)
innodb_purge_batch_size = 300
# Number of UNDO log pages to purge in one batch from the history list.
innodb_purge_rseg_truncate_frequency = 128
innodb_purge_threads = 1
# InnoDB中的清除操作是一类定期回收无用数据的操作。在之前的几个版本中，清除操作是主线程的一部分，这意味着运行时它可能会堵塞其它的数据库操作。
# 从MySQL5.5.X版本开始，该操作运行于独立的线程中,并支持更多的并发数。用户可通过设置innodb_purge_threads配置参数来选择清除操作是否使用单
# 独线程,默认情况下参数设置为0(不使用单独线程),设置为 1 时表示使用单独的清除线程。建议为1 取值范围1-32
innodb_random_read_ahead = OFF
# Enables the random read-ahead technique for optimizing InnoDB I/O.
innodb_read_ahead_threshold = 56
# Number of pages that must be accessed sequentially for InnoDB to trigger a readahead.
innodb_rollback_on_timeout = ON
# Roll back the complete transaction on lock wait timeout, for 4.x compatibility (disabled by default)
innodb_rollback_segments = 128
# Defines the number of rollback segments used by InnoDB.
innodb_sort_buffer_size = 1048576
innodb_spin_wait_delay = 6
innodb_stats_auto_recalc = ON
innodb_stats_method = nulls_equal
innodb_stats_on_metadata = OFF
innodb_stats_persistent = ON
innodb_stats_persistent_sample_pages = 20
innodb_stats_transient_sample_pages = 8
innodb_status_output = OFF
innodb_status_output_locks = OFF
innodb_strict_mode = OFF
# Use strict mode when evaluating create options.
innodb_sync_array_size = 1
innodb_sync_spin_loops = 30
# The number of times a thread waits for an InnoDB mutex to be freed before the thread is suspended.
innodb_table_locks = ON
# Enable InnoDB locking in LOCK TABLES
innodb_thread_concurrency = 0
# 默认设置为 0,表示不限制并发数，这里推荐设置为0，更好去发挥CPU多核处理能力，提高并发量
innodb_thread_sleep_delay = 10000
# Time of innodb thread sleeping before joining InnoDB queue (usec). Value 0 disable a sleep
loose_innodb_doublewrite_pages = 64
# Number of double write pages per thread.

#innodb_additional_mem_pool_size = 100M
# 附加的内存池   (尝试报错)
skip-external-locking 
# MySQL选项以避免外部锁定。该选项默认开启

# MyISAM Specific options#
key_buffer_size = 8M
# 指定用于索引的缓冲区大小，增加它可得到更好处理的索引(对所有读和多重写)，到你能负担得起那样多。如果你使它太大，
# 系统将开始换页并且真的变慢了。对于内存在4GB左右的服务器该参数可设置为384M或512M。通过检查状态值Key_read_requests和Key_reads，
# 可以知道key_buffer_size设置是否合理。比例key_reads/key_read_requests应该尽可能的低，
# 至少是1:100，1:1000更好(上述状态值可以使用SHOW STATUS LIKE 'key_read%'获得)。注意：该参数值设置的过大反而会是服务器整体效率降低
ft_min_word_len = 4
# 分词词汇最小长度，默认4
ft_max_word_len = 84
# The maximum length of the word to be included in a MyISAM FULLTEXT index.
ft_query_expansion_limit = 20
# Number of best matches to use for query expansion
block_encryption_mode = aes-128-ecb
bulk_insert_buffer_size = 8M
# 批量插入缓存大小， 这个参数是针对MyISAM存储引擎来说的。适用于在一次性插入100-1000+条记录时， 提高效率。默认值是8M。可以针对数据量的大小，翻倍增加。
myisam_sort_buffer_size = 8M
# MyISAM设置恢复表之时使用的缓冲区的尺寸，当在REPAIR TABLE或用CREATE INDEX创建索引或ALTER TABLE过程中排序 MyISAM索引分配的缓冲区
# myisam_max_sort_file_size = 4G
# 如果临时文件会变得超过索引，不要使用快速排序索引方法来创建一个索引。注释：这个参数以字节的形式给出
# myisam_repair_threads = 1
# 如果该值大于1，在Repair by sorting过程中并行创建MyISAM表索引(每个索引在自己的线程内) 
# myisam_recover
concurrent_insert = 1
# Use concurrent insert with MyISAM. Possible values are NEVER, AUTO, ALWAYS

# replication setting #
# log_bin = Master-bin
# binlog-do-db = callcenter
# binlog-ignore-db = mysql
# binlog-ignore-db = sys
# replicate-do-db = callcenter
# replicate-ignore-db = sys
# replicate-ignore-db = mysql
# auto_increment_increment = 2
# auto_increment_offset = 1
# Offset added to Auto-increment columns. Used when auto-increment-increment != 1
# master_info_repository = TABLE
# relay_log_info_repository = TABLE
sync_binlog = 100
# MySQL 的二进制日志（binary log）同步到磁盘的频率（刷新二进制日志到磁盘），默认是0，意味着mysql并不刷新，
# 由操作系统自己决定什么时候刷新缓存到持久化设置，如果这个值比0大，它指定了两次刷新到磁盘的动作之间间隔多少次二进制日志写操作。
# sync_binlog=0，当事务提交之后，MySQL不做fsync之类的磁盘同步指令刷新binlog_cache中的信息到磁盘，而让Filesystem自行决定什么时候来做同步，或者cache满了之后才同步到磁盘。这个是性能最好的。
# sync_binlog=1，当每进行1次事务提交之后，MySQL将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘。
# sync_binlog=n，当每进行n次事务提交之后，MySQL将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘。
# 如果没有设置它为1，那么崩溃后可能导致二进制日志没有同步事务数据，有可能binlog中最后的语句丢失。要想防止这种情况，你可以使用sync_binlog全局变量(1是最安全的值，但也是最慢的)，
# 使binlog在每N次binlog写入后与硬盘 同步。即使sync_binlog设置为1,出现崩溃时，也有可能表内容和binlog内容之间存在不一致性。如果使用InnoDB表，MySQL服务器 处理COMMIT语句，
# 它将整个事务写入binlog并将事务提交到InnoDB中。如果在两次操作之间出现崩溃，重启时，事务被InnoDB回滚，但仍 然存在binlog中。可以用--innodb-safe-binlog选项来增加InnoDB表内容和binlog之间的
# 一致性。(注释：在MySQL 5.1中不需要--innodb-safe-binlog；由于引入了XA事务支持，该选项作废了），该选项可以提供更大程度的安全，使每个事务的 binlog(sync_binlog =1)和(默认情况为真)
# InnoDB日志与硬盘同步，该选项的效果是崩溃后重启时，在滚回事务后，MySQL服务器从binlog剪切回滚的 InnoDB事务。这样可以确保binlog反馈InnoDB表的确切数据等，并使从服务器保持与主服务器保持同步
# (不接收 回滚的语句)。
# 注：大多数情况下，对数据的一致性并没有很严格的要求，所以并不会把 sync_binlog 配置成 1. 为了追求高并发，提升性能，可以设置为 100 或直接用 0。
# 而和 innodb_flush_log_at_trx_commit 一样，对于支付服务这样的应用，还是比较推荐 sync_binlog = 1.

# gtid_mode = on
# enforce_gtid_consistency = 1
binlog_format = ROW
# mysql复制主要有三种方式：基于SQL语句的复制(statement-based replication, SBR)，基于行的复制(row-based replication, RBR)，
# 混合模式复制(mixed-based replication, MBR)。对应的，binlog的格式也有三种：STATEMENT，ROW，MIXED。
# STATEMENT模式（SBR）
# 每一条会修改数据的sql语句会记录到binlog中。优点是并不需要记录每一条sql语句和每一行的数据变化，减少了binlog日志量，节约IO，提高性能。
# 缺点是在某些情况下会导致master-slave中的数据不一致(如sleep()函数， last_insert_id()，以及user-defined functions(udf)等会出现问题)
# ROW模式（RBR）
# 不记录每条sql语句的上下文信息，仅需记录哪条数据被修改了，修改成什么样了。而且不会出现某些特定情况下的存储过程、或function、或trigger的调用和触发无法被正确复制的问题。
# 缺点是会产生大量的日志，尤其是alter table的时候会让日志暴涨。
# MIXED模式（MBR）
# 以上两种模式的混合使用，一般的复制使用STATEMENT模式保存binlog，对于STATEMENT模式无法复制的操作使用ROW模式保存binlog，MySQL会根据执行的SQL语句选择日志保存方式。
# relay_log = relay.log
# relay_log_recovery = 1
# binlog_gtid_simple_recovery = 1
# slave-rows-search-algorithms = 'INDEX_SCAN,HASH_SCAN'
# slave-skip-errors = all
# slave_skip_errors = ddl_exist_errors
# master_host=192.168.200.210
# master_port=8210
# master_user=rep
# master_password=password
# master_connect_retry=60
#show_old_temporals = OFF
replica_net_timeout = 60
#replica_parallel_type = LOGICAL_CLOCK
#replica_type_conversions = 
# Controls the type conversion mode in effect on the slave when using row-based replication.
sync_source_info = 10000
sync_relay_log_info = 10000
source_verify_checksum = OFF

# semi sync replication settings #
# plugin_load = "validate_password.so;rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"
# rpl_semi_sync_master_enabled = 1
# rpl_semi_sync_master_timeout = 3000
# rpl_semi_sync_slave_enabled = 1

# password plugin #
# validate_password_policy=STRONG
# validate-password=FORCE_PLUS_PERMANENT
authentication_policy=mysql_native_password
# Mysql​​在之前的版本的关于​​password​​的加密方法都是使用的 ​​mysql_native_password​​，不过到​​MySQL8.0​​的时候换成了​​caching_sha2_password​
mysql_native_password_proxy_users = OFF
sha256_password_proxy_users = OFF

# new innodb setting in MySQL 5.7 #
# loose_innodb_numa_interleave=1
# innodb_undo_log_truncate = 1

# new replication setting #
# slave-parallel-type = LOGICAL_CLOCK
# slave-parallel-workers = 16
# slave_preserve_commit_order=1
# slave_transaction_retries=128

# other change setting #
# binlog_gtid_simple_recovery=1
log_timestamps=system
# 这个参数主要是控制 error log、slow_log、genera log，等等记录日志的显示时间参数，但不会影响 general log 和 slow log 写到表 (mysql.general_log, mysql.slow_log) 中的显示时间。
# 在查询行的时候，可以使用 CONVERT_TZ() 函数，或者设置会话级别的系统变量 time_zone 来转换成所需要的时区。
# 该参数全局有效，可以被设置的值有：UTC 和 SYSTEM，默认使用 UTC。它还支持动态设置，不过建议大家在配置文件中就写上，以免重启之后造成不必要的麻烦

loose_information_schema_stats_expiry = 86400
loose_innodb_log_write_ahead_size = 4096
# Log write ahead unit size to avoid read-on-write, it should match the OS cache block IO size.
loose_innodb_numa_interleave = ON
loose_innodb_parallel_read_threads = 1
# Number of threads to do parallel read.
loose_internal_tmp_mem_storage_engine = MEMORY
# tmp table engine
loose_optimizer_switch = 
# The optimizer_switch system variable enables control over optimizer behavior.
loose_optimizer_trace = enabled=off,one_line=off
# The optimizer_trace system variable has these on/off switches,enabled,one_line
loose_optimizer_trace_features = greedy_search=on,range_optimizer=on,dynamic_range=on,repeated_subselect=on
# Those features can be excluded from tracing using the optimizer_trace_features system variable
loose_performance_schema_accounts_size = 10000
# Maximum number of instrumented user@host accounts.
loose_performance_schema_digests_size = 10000
# Size of the statement digest.
loose_performance_schema_error_size = 10000
loose_performance_schema_hosts_size = 10000
# Maximum number of instrumented hosts.
loose_performance_schema_max_cond_instances = 10000
# Maximum number of instrumented condition objects.
loose_performance_schema_max_file_instances = 1000
# Maximum number of instrumented files.
loose_performance_schema_max_index_stat = 10000
# Maximum number of index statistics for instrumented tables.
loose_performance_schema_max_metadata_locks = 10000
# Maximum number of metadata locks.
loose_performance_schema_max_mutex_instances = 10000
# Maximum number of instrumented MUTEX objects.
loose_performance_schema_max_prepared_statements_instances = 1000
# Maximum number of instrumented prepared statements.
loose_performance_schema_max_program_instances = 10000
# Maximum number of instrumented programs.
loose_performance_schema_max_rwlock_instances = 10000
# Maximum number of instrumented RWLOCK objects.
loose_performance_schema_max_socket_instances = 1000
# Maximum number of opened instrumented sockets.
loose_performance_schema_max_table_handles = 10000
# Maximum number of opened instrumented tables.
loose_performance_schema_max_table_instances = 1000
# Maximum number of instrumented tables.
loose_performance_schema_max_table_lock_stat = 10000
# Maximum number of lock statistics for instrumented tables.
loose_performance_schema_max_thread_instances = 10000
# Maximum number of instrumented threads.
loose_performance_schema_setup_actors_size = 10000
# Maximum number of rows in SETUP_ACTORS.
loose_performance_schema_setup_objects_size = 10000
# Maximum number of rows in SETUP_OBJECTS.
loose_performance_schema_users_size = 10000
# Maximum number of instrumented users.

[mysqldump]
quick
max_allowed_packet = 16M 
# 服务所能处理的请求包的最大大小以及服务所能处理的最大的请求大小(当与大的BLOB 字段一起工作时相当必要)， 每个连接独立的大小.大小动态增加。 设置最大包,限制server接受的数据包大小，避免超长SQL的执行有问题 默认值为16M，当MySQL客户端或mysqld
# 服务器收到大于 max_allowed_packet 字节的信息包时，将发出“信息包过大”错误，并关闭连接。对于某些客户端，如果通信信息包过大，在执行查询期间，可能会遇到“丢失与 MySQL 服务器的连接”错误。默认值 16M。
[myisamchk]
key_buffer_size = 8M
sort_buffer_size = 8M
read_buffer = 4M
write_buffer = 4M